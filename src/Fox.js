/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
// */

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';


// var container, stats, controls;
// var camera, scene, renderer;

// const raycaster = new THREE.Raycaster();
// const pointer = new THREE.Vector2();

// function onPointerMove( event ) {

	// calculate pointer position in normalized device coordinates
	// (-1 to +1) for both components

// 	pointer.x = ( event.clientX / window.innerWidth ) * 2 - 1;
// 	pointer.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

// }

// function render() {

// 	// update the picking ray with the camera and pointer position
// 	raycaster.setFromCamera( pointer, camera );

// 	// calculate objects intersecting the picking ray
// 	const intersects = raycaster.intersectObjects( scene.children );

// 	for ( let i = 0; i < intersects.length; i ++ ) {

// 		intersects[ i ].object.material.color.set( 0xff0000 );

// 	}

// 	renderer.render( scene, camera );

// }

// window.addEventListener( 'pointermove', onPointerMove );

// window.requestAnimationFrame(render);


// const renderer = new THREE.WebGLRenderer();
// renderer.setSize( window.innerWidth, window.innerHeight );
// document.body.appendChild( renderer.domElement );
// camera.position.x = 5;
// camera.position.y = 5;
// camera.position.z = 5;

// const loader = new GLTFLoader();

// function addModel(pos) {
//   const loader = new GLTFLoader();
//   loader.load(`res/saturnV/scene.gltf`, (gltf) => {
//     const model = gltf.scene;
//     model.position.set(pos.x, pos.y, pos.z);
//     model.isDraggable = true;
//     scene.add(model);
//   });
// }

// addModel({ x: 30, y: 33, z: 1 });

export default function Model({ ...props }) {
  const group = useRef()
  const { nodes, materials } = useGLTF('/fox.gltf')
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.Plane119.geometry} material={materials['Material.091']} position={[30,33,1]}/>
    </group>
  )
}

useGLTF.preload('/toucan.gltf')




